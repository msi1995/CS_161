/*******************************************************************
** Program: assignment4n.cpp

** Author: Doug Lloyd

** Date: 11/22/2019

** Description: Takes in a user input as c-style string, up to 1024 
characters. Prompts user to choose if they want to execute palindrome
check, word frequency counter, or check frequency of a specific word of
their choice. Strips strings of special characters and changes to lowercase.
(e.g. 'wo#!([rd' would be changed to 'word'.)

** Input: User input into c style string. User selection of which mini-program to run, by
typing in 1, 2, or 3.

** Output: For choice 1, checks if user string is a palindrome and returns a boolean.
For choice 2, counts frequency of all words provided in user string and outputs frequency
for each word. For choice 3, counts frequency of specific words user chooses within the
user provided string, and outputs frequency for each word.
*******************************************************************/



#include <iostream>
#include <string>
#include <cstring>
#include <cmath>
#include <cstdlib>



using namespace std;

char* purge_string(char* str);
char* purge_string_spaces_intact(char* str);
bool is_palindrome(char* str);
void to_lower(char* str);
bool run_palin(char* arr1);
int choice(char* arr);
void run_Freq(char* arr);
void run_freq_given(char* arr);
void remove_duplicates(string* words, char* arr, int wordCount);
void count_frequency(string* uniqueWords, string* words, int wordCount, int freqCount);
void count_frequency2(string* uniqueWords, string* words, int wordCount, int freqCount);
string* get_array_words(char* arr, int& count, string* parg);

int main() {
	bool result;
	char arr[1025];
	char* arr1 = arr;
	int userChoice, run = 1;

	while (run == 1) {
		userChoice = choice(arr);
		
		switch (userChoice) {
			case 1:
				result = run_palin(arr1);
				break;
			case 2:
				run_Freq(arr1);
				break;
			case 3:
				run_freq_given(arr1);
				break;
			default:
				run = 0;
				break;
		}

	}
	return 0;
}


/*********************************************************************
** Function: void run_freq_given(char* arr)
** Description: This function asks the user how many words they want
	to search for and stores it as int in 't'. It then creates a pointer
	to a dynamic array of strings of size [t]. Initializes pointer
	wordsParge and points it to an array generated by get_array_words().
** Parameters: char*
** Pre-Conditions: A valid c-style string 
** Post-Conditions: Must have a wordsParge successfuly created, such that
	get_array_words must run seamlessly
*********************************************************************/
void run_freq_given(char* arr) {
	int t;
	string word, dummy;
	int count;
	cout << "How many words do you want to search for: ";
	cin >> t;
	getline(cin, dummy);
	string* words = new string[t];
	string* wordsParge;

	for (int i = 0; i < t; i++) {
		cout << "Enter word " << i + 1 << endl;
		getline(cin, word);
		words[i] = word;
	}
	wordsParge = get_array_words(arr, count, wordsParge);

	count_frequency2(words, wordsParge, count, t);
	
}

/*********************************************************************
** Function: string* get_array_words(char* arr, int& count, string* parg)
** Description: This function strips spaces and makes the string lowercase
	Takes all words from user input c-style string and populates string array.
	Creates a dynamic array and copies data from static array over to dynamic.
** Parameters: char* arr, int& count, string* parg
** Pre-Conditions: Receives a cstyle string, reference to an int, and string
	pointer
** Post-Conditions: return parg
*********************************************************************/
string* get_array_words(char* arr, int& count, string* parg) {
	arr = purge_string_spaces_intact(arr);
	to_lower(arr);
	string words[256];
	string temp;
	int start = 0, end = 0, wordCount = 0;

	for (int i = 0; i < strlen(arr); i++) {
		if (arr[i] == ' ') {
			for (int j = start; j < end; j++)
				words[wordCount] += arr[j];

			wordCount++;
			start = i + 1;
		}
		else if (arr[i + 1] == ' ') {
			end = i + 1;
		}
		else if (arr[i + 1] == NULL) {
			for (int j = start; j < i + 1; j++)
				words[wordCount] += arr[j];
			wordCount++;
		}
	}
	parg = new string[wordCount];
	for (int i = 0; i < wordCount; i++)
		parg[i] = words[i];

	delete arr;
	count = wordCount;
	return parg;
}


/*********************************************************************
** Function: int choice(char* arr)
** Description: Prompts user for input and stores that user input into
	'arr' as a c-style string passed by pointer. Gets user choice
	for which mini-program to run
** Parameters: char*
** Pre-Conditions: receives a valid array to populate
** Post-Conditions: populates array that char* is pointing to and 
	returns a value to be used in main
*********************************************************************/
int choice(char* arr) {
	string t;
	cout << "Enter a string up to 1024 characters: ";
	cin.getline(arr, 1024);
	cout << endl << "press 1 for palindrome detector." << endl << "press 2 for word frequency count." << endl << "press 3 to return frequency of specific words of your choosing.";
	cout << endl << "Type anything else to exit: ";
	// I used a getline and switch because this was the easiest way to error handle I could think of
	getline(cin, t);
	if (t == "1")
		return 1;
	else if (t == "2")
		return 2;
	else if (t == "3")
		return 3;
	else
		return -1;

}


/*********************************************************************
** Function: run_palin(char* arr1)
** Description: arr1 passed by pointer into function. The purge_string 
	and to_lower functions are ran on arr1 to strip the input. is_palindrome
	is ran on the purged string. This function essentially just calls all
	the other necessary functions and returns the proper value in a cout.
	Deletes memory that was dynamically allocated for arr1.
** Parameters: char*
** Pre-Conditions: receive pointer to c style string (char array)
** Post-Conditions: return a result for palindrome
*********************************************************************/
bool run_palin(char* arr1) {
	bool result;
	arr1 = purge_string(arr1);
	to_lower(arr1);
	result = is_palindrome(arr1);
	cout << endl << "(0 = not palindrome, 1 = palindrome)" << endl << "RESULT: " << result << endl << endl;
	delete[] arr1;
	return result;
}

/*********************************************************************
** Function: char* purge_string(char* str)
** Description: This function takes in a pointer to (???) and gets rid
	of any spaces or special characters by only copying in a-z 0-9 A-Z 
	to a new array, char userstring[1025]. It then creates a 1D dynamic array
	pointed to by pointer p and populates the array with all of the values
	from userstring.
** Parameters: char*
** Pre-Conditions: receive c style string
** Post-Conditions: return purged string
*********************************************************************/
char* purge_string(char* str) {
	char userstring[1025];
	int count = 0;

	for (int i = 0; i < strlen(str); i++) {
		if ((str[i] > 47 && str[i] < 58) || (str[i] > 64 && str[i] < 91) || (str[i] > 96 && str[i] < 123)) {
			userstring[count] = str[i];
			count++;
		}
	}

	char* p = new char[count + 1];
	for (int i = 0; i < count; i++) {
		p[i] = userstring[i];
	}

	return p;
}

/*********************************************************************
** Function: char* purge_string_spaces_intact(char* str)
** Description: This function takes in a pointer to (???) and does the 
	same thing as the purge function above, except it does not remove
	spaces. This is used for the word frequency functionality, since
	removing spaces would make counting frequency impossible.
** Parameters: char*
** Pre-Conditions: receive c style string
** Post-Conditions: return purged string with spaces left intact
*********************************************************************/
char* purge_string_spaces_intact(char* str) {
	char userstring[1025];
	int count = 0;

	for (int i = 0; i < strlen(str); i++) {
		if ((str[i] == 32) || (str[i] > 64 && str[i] < 91) || (str[i] > 96 && str[i] < 123)) {
			userstring[count] = str[i];
			count++;
		}
	}

	char* p = new char[count + 1];
	for (int i = 0; i < count; i++) {
		p[i] = userstring[i];
	}

	return p;
}

/*********************************************************************
** Function: char* is_palindrome(char* str)
** Description: This function takes in a pointer to (???) and then 
	compares the string at index 0 to its last index, index 1 to last 
	index-1, etc until the iterations are finished or an inequality is
	found. If not equal, the stop value is set to 1 and false is returned.
** Parameters: char*
** Pre-Conditions: receive fully purged c style string
** Post-Conditions: boolean true or false returned
*********************************************************************/
bool is_palindrome(char* str) {
	int stop = 0;

	for (int i = 0; i < strlen(str); i++) {
		if (str[i] != str[strlen(str) - i - 1]) {
			stop = 1;
			break;
		}

	}
	if (stop == 1) {
		return false;
	}
	else return true;
}

/*********************************************************************
** Function: to_lower(char* str)
** Description: This function takes in a pointer to (???) and changes 
	all letters to lowercase. It does not do anything to numbers or 
	other characters.
** Parameters: char*
** Pre-Conditions: receive partially purged c-style string
** Post-Conditions: complete purge by changing to lowercase
*********************************************************************/
void to_lower(char* str) {

	for (int i = 0; i < strlen(str); i++) {
		if (str[i] >= 65 && str[i] <= 90)
			str[i] = (str[i] + 32);
	}

}

/*********************************************************************
** Function: void run_Freq(char* arr, int& count, string* parg)
** Description: Get all words from c-style string (purged) and stores them
	into array words[256]. Calls remove_duplicates()
** Pre-Conditions: receive c style string
** Post-Conditions: copy words from c style string into static array
*********************************************************************/
void run_Freq(char* arr) {
	arr = purge_string_spaces_intact(arr);
	to_lower(arr);
	string words[256];
	string temp;
	int start = 0, end = 0, wordCount = 0;
	
	for (int i = 0; i < strlen(arr); i++) {
		if (arr[i] == ' ') {
			for (int j = start; j < end; j++)
				words[wordCount] += arr[j];

			wordCount++;
			start = i + 1;
		}
		else if (arr[i + 1] == ' '){
			end = i + 1;
		}
		else if (arr[i + 1] == NULL) {
			for (int j = start; j < i + 1; j++)
				words[wordCount] += arr[j];
			wordCount++;
		}
	}
	remove_duplicates(words, arr, wordCount);
}

/*********************************************************************
** Function: void remove_duplicates(string* words, int& count, string* parg)
** Description: Gets rid of any duplicate words in 'words' array by copying
	words from 'words' into freq.
** Pre-Conditions: receive words array 
** Post-Conditions: copy words[] into freq[] and call count_frequency()
*********************************************************************/
void remove_duplicates(string* words, char* arr, int wordCount) {
	string word;
	string freq[256];
	int freqCount = wordCount;

	for (int i = 0; i < wordCount; i++)
		freq[i] = words[i];

	for (int i = 0; i < freqCount; i++) {
		word = freq[i];
		for (int j = i + 1; j < freqCount; j++) {
			if (word == freq[j]) {
				for (int k = j; k < freqCount - 1; k++)
					freq[k] = freq[k + 1];

				freqCount--;
				j--;
			}
		}
	}
	delete[]arr;
	count_frequency(freq, words, wordCount, freqCount);
}

/*********************************************************************
** Function: void count_frequency(string* uniqueWords, string* words, int wordCount, int freqCount)
** Description: Creates tracker and counts frequency of words that occur
	in string passed in by user at start of program (option 2 in program)
** Pre-Conditions: Receive 2 string pointers, 2 int (words array)
** Post-Conditions: Count and cout frequency of words in user provided
	string. free memory
*********************************************************************/
void count_frequency(string* uniqueWords, string* words, int wordCount, int freqCount) {

	int* tracker = new int[freqCount];
	for (int i = 0; i < freqCount; i++)
		tracker[i] = 0;

	for (int i = 0; i < freqCount; i++) {
		for (int j = 0; j < wordCount; j++) {
			if (uniqueWords[i] == words[j])
				tracker[i]++;
		}
	}

	for (int i = 0; i < freqCount; i++)
		cout << "Frequency of " << uniqueWords[i] << " is " << tracker[i] << endl;

	delete [] tracker;

}

/*********************************************************************
** Function: void count_frequency2(string* uniqueWords, string* words, int wordCount, int freqCount)
** Description: Creates tracker and counts frequency of words in given words
	against user string at start of program (option 3 in program)
** Pre-Conditions: Receive 2 string pointers, 2 int (words array)
** Post-Conditions: Count and cout frequency of words user chose to search
	present in the string they originally provided. free memory
*********************************************************************/
void count_frequency2(string* uniqueWords, string* words, int wordCount, int freqCount) {

	int* tracker = new int[freqCount];
	for (int i = 0; i < freqCount; i++)
		tracker[i] = 0;

	for (int i = 0; i < freqCount; i++) {
		for (int j = 0; j < wordCount; j++) {
			if (uniqueWords[i] == words[j])
				tracker[i]++;
		}
	}

	for (int i = 0; i < freqCount; i++)
		cout << "Frequency of " << uniqueWords[i] << " is " << tracker[i] << endl;

	delete[] words;
	delete[] uniqueWords;
	delete [] tracker;

}



